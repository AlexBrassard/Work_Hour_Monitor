/*
 *
 * Work Hour Monitor v2.0  -  Notes.
 *
 */
TOP
----
Very Important:
Note: Keeping on working passed forty hours should be rewarding:
   During the creation of a new configuration entry, the user must
   be asked if overtime is paid, if yes how much it's paid (cash or percentage).
   The overtime must be added to the calculs and a symbol needs to be added to
   hour sheets to indicate overtime hours.
   (Note that another symbol must be added to indicate if the shift was a day or night shift.)
   (See SLB...Fevrier... .sheet in the current directory for an example. )
     - 2 flags are added to whm_config_T: time_n_half_after_40 and double_time_after_50.
       When set 0 it has no effect. When > 0, if the weekly amount of hour reaches 40 and 50
       pay gets calculated as (wage+(wage/2)) * hours and (wage+wage) * hours, respectively.
     - 2 new arrays are created in the whm_day_T data type to record ther per position
       number of hours and earnings of overtime made this day.
     - The overtime rows of an hour sheet are optional and will only be present if overtime
       was made during that week.
     - whm_write_sheet() must be modified to handle this new feature.
     [ Implemented ]
       whm_read_sheet() must be modified to handle the new feature.
     [ Implemented ]
       whm_update_sheet() must be modified to handle the new feature.
         + When the first of the month begins on any other day than sunday,
	   whm should check the last [incomplete] week of the previous month
	   to calculate the totals of reg/over time.
	 + An incomplete week at the end of a month should not have it's totals
	   calculated within the current month, but instead it should be calculated
	   in the first week of the next month. The daily hours/earnings should still be
	   in their respective month.
	 + Whm should provides its users a convinient way of checking more than
	   1 month at a time.
	 . Overtime should be calculated as a separate step, inbetween
	   whm_get_week_totals() and whm_get_sheet_cumuls().
	 . It's safe to assume that the overtime hours are the last ones of any week
	   above the regular hours threshold (someplaces it's 40, other 44 etc..)  -> Check labor laws <-
	 . Any hours that is labeled "overtime" should be substracted from the regular hours
	   (since at this point, daily/weekly hours have been calculated already).
	   
	   HERE HERE HERE
	   position indexing seems wrong and overtime (and time in general) is now
	   off by alot... 

Very Important:
Note: User interface is getting a menu:
    whm_automatic_mode will be changed into an option (whm --auto) that takes no
    arguments. When whm will be invoked by itself without command line options,
    A menu will appear on the screen with the following elements:
     - Enter daily hours.
     - Modify entered hours.
     - Display an existing hour sheet.
     - Display the program's configuration file.
     - Display monthly, per week summary of an active company.
     - Edit the program's configuration file.
     - Recalculate a given company's hour sheet.
     - Recalculate all hour sheets.

  Side Note:
    When inputing "exit" or a synonym the program should actualy exit..!

  Side Note: [Done: see '->' below]
    Because the whm_modify_previous_date function modifies the time object
    it receives by its caller, to be able to use the global list of sheets
    to write to disk, the whm_backup_T data type must be modified to include
    a time object pointer proper to the sheet with the same index.
    Each sheets must be associated a time object. (Atm only 1 is created and passed along the program.)
    whm_write_sheet_list() must be modified to take no parameters and
    instead use the time object pointer within the whm_backup_T structure.
    The function whm_modify_previous_date() (not yet in whm.h) is taking care of
    opening, backing up, updating, writing and closing each sheet encountered.
    This was much more simple to implement than changing the way time objects are
    handled in the whole program. 

  * The same problem arise from the whm_recalculate_year() function that must
    modify its time object in order to write consistent data back to disk...
 ->  - Add a field of type whm_time_T* to the whm_sheet_T data type that
      would be initialized only when a sheet needs to use a date other
      than today's date. When NULL, main()'s time object (today's date)
      will be used as usual.
      Modify the whm_write_sheet_list() function so that it handles this
      new whm_sheet_T structure field properly.
      

Very Important:
Note: Ignore any comments your hear, but remember all of them just in case:
    Since the configuration file should not be edited by hand,
    the position of commentaries and the comments themselfs should not
    be recorded but it will be very required for operations on hour sheets.
    Also, make sure that a line containing only a comment does not count
    in the line_count.


Very Important:
Note: Sometimes no answer's an answer:
    Adjust whm_ask_user() so that for certain questions no answer means don't
    touch anything, so questions like SHEET_WORKED_HOURS that'd get an empty answer
    (a single newline) understands it as "I'll input the hours later."


Important:
Note: Not that twins aren't cool, they're just too confusing:
    When using any of the _modify_config() functions, an additional check
    must be made to make sure no company or position name gets duplicated.


Note: Option argument that needs to be added now:
    The -d --delete option needs a "type" argument, which isn't part
    of the argument list so I need to add that.
    The argument would be either "config" or "sheet" which would let users
    delete either a config entry or an hour sheet.
    If the type is sheet, delete can take up to 3 more arguments:
    "name" and "month" and "year", of which only name is obligatory.

    The new field has been added to the structure but I'm still
    hesitating whether it's a good idea or not to implement this.


Note: Routine review:
    Some routines like whm_modify_config() could use some of the newer
    routines like whm_validate_position().
    Review and optimize all routines.


Note: Wait till I'm done you little...:
    I'll wait till the program is finished then add 2 fields to see if I did
    a good job in making it easy to add informations.
    These are:
     . total hours since creation (anciennette, english -> ? )
     . holiday cash ($ to be paid when going on vacation)
    

Mixed Notes: (Not very acurate anymore)
  - Use fgets to read one line at a time.
  - The configuration file should not be edited by hand.
  - No streams should be passed through functions.
  - A separate header should be made for all values (pathnames)
    a user must set at the program installation.
    The installation script will create this file and prompt the
    user for all required system specific values.
  - Make sure it's easy to add more options.
  - The function to read hour sheets should not depend directly on sheet_T->numof_positions.
    It should know when the configuration file has changed and should be able to reflect
    these changes.
  - Every run:
    . Check if the .whm.d directory exist.
    . Check if the configuration file exist and is valid.
    . Read the configuration file, populating internal structure.
    . Fetch the current date.
    . Check that each company found in the configuration file has an existing working directory.
    . Check that the current year directory exists for each company.
    . Check that the hour sheet for the current month for each company exist.
    . Backup all required hour sheets.
    . Read all required hour sheets.
    . Check for and execute command line options (not executing the next points).
    . When no options were passed, interactively update all non-filled hour sheets.
    . Write all updated hour sheets.
    . Delete all hour sheet backups.
    . Free all memory and exit.


Note: Options and their arguments:
    A short option begins by a single dash followed by a single alphabetic character.
    A long option begins by two dashes followed by one or more alphanumeric characters.
    Both can take arguments of the form:     arg_name=value    with no spaces in between.
    Options are: (whm_*_op() functions, lower whm_main.c file.)
    . -p  --print  [name] [year] [month]			Print an hour sheet to stdout.
        The [name] argument is mandatory, [year] and [month] are both optional.
	If [name] is set to (at least in part) "configuration",
	the content of the configuration file is printed to stdout.
	
    . -u  --update [name] [position] [hours] [date*] [month] [year]  	Update a company's hour sheet.
        The [name] argument is mandatory.
	* date in either of the following forms:
	    dd/mm/yyyy [all digits]	 (the year is optional in both digit forms, 
	    dd-mm-yyyy [all digits]	  current year is assumed in this case.)
	    date (digits)                (given date of current month of current year is assumed unless
	    	 			  month and/or year are also present.)
	    

    . -a  --add    (fully interactive) 		 		Add a company to the configuration file.
    . -d  --delete [name]					Delete a company from the configuration file.
        [name] is mandatory.
	
    . -m  --modify [name] [position] [field] [value]    	Modify an existing entry in the configuration file.
        [name] is mandatory, so is [value] but only if [field] is present.
	
    . -l  --list   						Print a list of the companies names in the configuration file.
    . -h  --help  						Print a short help message.


The idea:
    Work Hour Monitor will prompt its users at least once a day
    for the number of hours worked.
    A configuration file will be used
    to store information about tracked companies, and use this
    info to create, once a month, an hour sheet for that company
    for that month.
    WHM should expect all of the content of the ~/.whm.d/ directory
    to be edited by hand and should reflect these changes the next
    time it's run.
    All files within the ~/.whm.d/ directory should be editable
    interactively within WHM or directly from switches on the command line.
    WHM will calculate the amount of hours and money made for each active
    company in the configuration file.
    WHM should expect that the number of parameters that influence a salary
    can vary and it should be built so it's easy to add/remove any.


/******************************************* Completed **********************************************/
[Done: inputing "cancel" or "exit" quit discarding any modifications made so far.]
Very Important:
Note: I'm leaving! But please don't be mad..:
    Every time WHM asks its users something, there must be safe escape routes,
    safe meaning without consequences on the program's existing data.
    There should be a way to quit the program totaly, without data lost other than
    what hasn't been already saved to disk, even in the middle of say modifing the configuration file.
    At each steps there should be an option to roll back one or more steps
    in order to modify/overwrite something we've just input.


[Done: sheets are written only before exiting, same for configuration file.]
Very Important:
Note: Fail like you were born to fail:
    Any modifications should be written to disk only at the
    very last moment so that when failing due to an error or a strong
    will to cancel everything, not everything gets messed up.    


[Done]
Very Important:
Note: And the magical number is...
    Replace every '-1' for "WHM_ERROR" (#define in whm_error.h).
  Related note:
    Define "WHM_NOMATCH" in whm.h to '-2' so whm_validate_name() can return
    WHM_ERROR (-1) on error, WHM_NOMATCH when no match is found else the index of
    the match within the config array.



[Done: Did exactly this.]
Note: Install me properly:
    The installation script needs to be reworked. First, a makefile must be created
    to handle everything related to program's compilation.
    The install script should interactively create (with the option to do it automaticaly)
    the 'whm_sysdep.h' file, which is mostly system/user dependent pathnames.


[Done: See below]
Very Important: 
Note: It's ok to do yourself a manual job but..:
    The hour sheet must be editable by hand, but a user should not
    have to calculate the amount of money made, whm should.
    whm_read_sheet() should ensure that when the whole sheet has been
    parsed and stored into the sheet_T object, all filled hours filed
    has a their corresponding earning field filled and vice-versa.

[whm_update_sheet() recalculate everthing every run]
    How to determine an hour sheet has been modified, and which fields
    of the file has been modified?
    Make a hidden directory: .last_run.d/ that would keeps a double of the
    latest version of each sheets the program has seen every time is ran.
    A sheet is first read in memory, then it's double is read and
    both are compared against each others, adjusting the differences
    (if old > new then 
    If nothing has changed whm_update_sheet() isn't called.

    Compare each current days and their doubles if it's the same no calculs must be done but:
    if earnings are bigger than hours, adjust hours else if hours are bigger than 0 adjust earnings.
    Each weeks and month data must be reseted before any calcul is to be done on them.

[Made global arrays of sheet_T and config_T pointers for exactly this.]
    A list of updated sheets waiting to be written to disk sounds like a good idea.

    What I really want: A user can edit any fields of an hour sheet and whm will adjust the
    related values accordingly.


[Done: Created s_strcmp within Libsafeutils, that has a flag for this.]
Important:
Note: Different cases, same problems:
    Whm_ask_user must not be sensitive to case (upper/lower) when it asks users for
    input. So "SLB", "Slb", "slb", "sLb", etc are all equivalent.


[Done: s_strcmp now handles case-insensitive comparaisons. ]
Very Important: 
Note: Careful not to let to much spaces between them:
    Spaces and underscores should be interchangeable when asking user to
    input values so that "harvey inox" and "harvey_inox" would both match
    the same entry.
    

[Done: The user is warned that the existing file is removed and recreated.]
Important:
Note: Fill those empty bellies:
    A configuration file that contains only a heading message or
    other comments should be considered empty and be removed to
    be recreated.


