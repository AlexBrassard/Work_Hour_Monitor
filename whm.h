/*
 *
 * Work Hour Monitor  -  Main header file.
 *
 * Version: 1.001
 *
 */

#ifndef WHM_MAIN_HEADER_FILE
# define WHM_MAIN_HEADER_FILE

# include <stdio.h>
# include <stdlib.h>
# include <string.h>

# include "whm_sysdep.h" /* System dependent values. */
# include "whm_error.h"
# include "sutils.h"     /* Safe-utils library. */


/*** Constants ***/
/* Including the terminating NULL byte. */
# define WHM_TIME_STR_S           16             /* Size of strings within whm_time_T objects.     */
# define WHM_STRFTIME_STR_S       32               
# define WHM_NAME_STR_S           18             /* Maximum lenght of names.                       */
# define WHM_CASH_STR_S           16             /* Maximum lenght of money strings.               */
# define WHM_MAX_NUMOF_OPTIONS    256            /* Maximum number of command line options.        */
# define WHM_PROG_NUMOF_OPTIONS   5              /* Current number of options available to use.    */
# define WHM_MAX_CONFIG_ENTRIES   256            /* No more than 256 companies in the config file. */
# define WHM_MAX_PATHNAME_S       4096           /* Maximum lenght of pathnames.                   */
# define WHM_LINE_BUFFER_S        WHM_MAX_PATHNAME_S /* Size of buffers used to read lines.        */  
# define WHM_NUMOF_EOI_STRINGS    9              /* Number of "end of input" character (see array below). */

# define WHM_DEF_NUMOF_POSITIONS  24             /* Default maximum number of positions and wages. */

# define WHM_DIRECTORY_PERMISSION 0777           /* Permissions on a newly created directory (gives 755 when & ~umask & 0777). */
# define WHM_FILE_PERMISSION      0600           /* Permissiosn on a newly created file.           */

# define SPACE   ' '                             /* Represents a space character.                  */
# define NEWLINE '\n'                            /* Represents a newline character.                */
# define DASH    '-'                             /* Represents the dash character.                 */
# define COLON   ':'                             /* Represents a colon character.                  */
# define SLASH   '/'                             /* Represents a slash character.                  */
# define STAR    '*'                             /* Represents the star character.                 */
# define NUMBER  '#'                             /* Represents the number character.               */
# define DOT     '.'                             /* Represents the dot character.                  */
# define U_SCORE '_'                             /* Represents the underscore character.           */

# define WHM_INPUTDONE             -2222         /* Used by whm_ask_user to signify input is done. */

/* Suffix appended to every newly created backup file. */
static const char WHM_BKUP_SUFFIX[]      = ".whmbkup";

/* Every supported short options. */
static const char WHM_SHORT_OPTIONS[][3] = {"-p", "-u", "-a", "-d", "-m", "-l", "-h" };

/* Every supported long options. */
static const char WHM_LONG_OPTIONS [][9] = {
  "--print",  "--update",
  "--add",    "--delete",
  "--modify", "--list",
  "--help"
};

/* The maximum number of expected arguments for each options named above. */
static const int WHM_NUMOF_ARGS_PER_OPTION[] = { 3, 4, 0, 1, 1, 0, 0 };

/* The heading message printed to a new configuration file. */
static const char WHM_CONFIG_HEADER_MSG[] =
  "/*\n *\n * Work Hour Monitor  -  Main configuration file.\n *\n * Please do NOT edit this file by hand.\n\
 * Use the appropriate command line options.\n * (More infos: -h or --help)\n *\n *\n\
 * The fields represent:\n * 1. Status\n * 2. Company name\n * 3. Company's working directory\n \
* 4. The number of positions occupied\n * 5. The positions names\n * 6. Positions' wages\n * 7. The night bonus,\
 if any\n * 8. Whether holiday pay is paid each week\n */\n\n";

/* End of input characters/strings. */
static const char WHM_END_OF_INPUT[WHM_NUMOF_EOI_STRINGS][WHM_NAME_STR_S] = {
  "d", "done", "DONE", "e", "exit", "EXIT", "f", "fin", "FIN"
};

/*** Data types ***/

/* Broke down time information strings. */
typedef struct whm_time_type {
  char                     day[WHM_TIME_STR_S];  /* The abreviated day name (english).      */
  char                     date[WHM_TIME_STR_S]; /* Date of the object. (1-31)              */
  char                     week[WHM_TIME_STR_S]; /* Week number of the object.  (1-53)      */
  char                     month[WHM_TIME_STR_S];/* Month number of the object. (1-12)      */
  char                     year[WHM_TIME_STR_S]; /* Year including centuries of the object. */

} whm_time_T;

/* WHM's main data type, a FIFO queue. */
typedef struct whm_queue_type {
  char                     **string;             /* An array of strings.                    */
  int                      index;                /* First free string of ->queue.           */
  int                      top_index;            /* Maximum numbers of strings in ->queue.  */
  size_t                   string_lenght;        /* Maximum lenght of a string of ->queue.  */
  size_t                   is_empty;             /* 0: NOT empty (at least index 0 is populated), > 0: the queue is empty. */

} whm_queue_T;

/* Holds all information regarding a single entry of the configuration file. */
typedef struct whm_config_type {
  size_t                   status;               /* 0: inactive, no reading is made. > 0: active.               */
  char                     *employer;            /* The name of the employer for this entry.                    */
  char                     *working_directory;   /* This company's hour sheet directory.                        */
  size_t                   numof_positions;      /* Number of different positions occupied in this company.     */
  char                     **positions;          /* The name of all positions occupied in this company.         */
  double                   *wages;               /* Wages for each positions.                                   */
  char                     *night_prime;         /* > 0: The exact amount; 0: night shift recorded, no prime; < 0: not recorded. */
  size_t                   do_pay_holiday;       /* > 0: The 4% holiday pay is paid every week, not cummulated. */

} whm_config_T;

/* Holds all information regarding a single hour sheet. */
typedef struct whm_sheet_type {
  int                      year;                 /* This sheet's year.  */
  int                      month;                /* This sheet's month. */
  double                   **day_pos_hours;      /* Cumulatives, per week day, per positions. (+1 for monthly totals.) */
  double                   **day_pos_earnings;   /* Cumulatives, per week day, per positions. (+1 for monthly totals.) */
  struct whm_week_type     **week;               /* Array of 6 week objects, one for each week of the month.           */

} whm_sheet_T;


/* Holds all information regarding a single week of an hour sheet. */
typedef struct whm_week_type {
  size_t                   week_number;          /* From 0 to 53.                                          */
  double                   pos_total_hours;      /* Total hours worked this week, per positions.           */
  double                   pos_total_earnings;   /* Total earnings, per positions.                         */
  double                   total_hours;          /* Total hours, all positions combined.                   */
  double                   total_earnings;       /* Total earnings, all positions combined.                */
  struct whm_day_type      **day;                /* Array of 7 day objects, one for each days of the week. */

} whm_week_T;

/* Holds all information regarding a single day of a single week of an hour sheet. */
typedef struct whm_day_type {
  int                      date;                 /* This day's date, from 1 to 31. -1: no informations.     */
  double                   *pos_hours;           /* Hours worked for each positions.                        */
  double                   *pos_earnings;        /* Earnings for each positions.                            */
  double                   total_hours;          /* Total hours worked, all positions combined.             */
  double                   total_earnings;       /* Total earnings, all position combined.                  */

} whm_day_T;

enum whm_option_names {
  NONE = -1,
  PRINT = 0,
  UPDATE,
  ADD,
  DELETE,
  MODIFY,
  LIST,
  HELP
};

typedef struct whm_option_type {
  enum whm_option_names     operation;
  /* Arguments that might be present, depending on the requested operation. */
  char                      *name;
  char                      *position;
  int                       year;
  int                       month;
  int                       date;
  double                    worked_hours;

} whm_option_T;

enum whm_question_type {
  /* When creating the configuration file. */
  EMPLOYER = 0,
  POSITION,
  POSITION2,
  WAGE,
  NIGHT_PRIME,
  HOLIDAY_PAY,
  ADD_COMPANY,
  /* When modifing the configuration file. */
  MODIF_COMPANY_NAME,
  MODIF_CONFIG_FIELD,
  MODIF_UNKNOWN_COMPANY,
  MODIF_POSITION,
  FIELD_STATUS,
  FIELD_EMPLOYER,
  FIELD_POSITION,
  FIELD_WAGE,
  FIELD_NIGHT_PRIME,
  FIELD_HOLIDAY_PAY

};

enum whm_config_field_type {
  F_STATUS,
  F_EMPLOYER,
  F_POSITION,
  F_WAGE,
  F_NIGHT_PRIME,
  F_HOLIDAY_PAY

};

/*** Prototypes ***/

/* whm_gen_utils.c */
int            whm_new_dir         (const char *dir_name); /* Create a new directory if it doesn't already exists.         */
int            whm_get_time        (whm_time_T *time_o);   /* Get the current date in a preinitialized whm_time_T object.  */
int            whm_clr_time        (whm_time_T *time_o);   /* Clear all fields of a whm_time_T object.                     */
char*          whm_get_string      (whm_queue_T *queue);   /* Get a string from queue.                                     */
int            whm_set_string      (whm_queue_T *queue,    /* Add a string to queue.                                       */
				    char *value);
int            whm_clr_string      (whm_queue_T *queue,    /* Clear a string from queue.                                   */
				    int index);
char*          whm_create_backup   (const char *filename,  /* Create a backup of the given file.                           */
				    char *backupname);
int            whm_delete_backup   (const char *filename); /* Delete the given backup file.                                */
int            whm_ask_user        (enum whm_question_type questions, /* Ask a question to the user via stdin.             */
				    char *answer,
				    size_t answer_s,
				    whm_config_T *config,
				    int pos_ind);

/* whm_config.c    */
int            whm_new_config      (const char *pathname,  /* Create a new configuration file.                             */
				    int *config_index,
				    whm_config_T **configs);
int            whm_add_config      (int *config_index,     /* Add a company to the configuration file.                     */
				    whm_config_T **configs);
int            whm_read_config     (FILE *stream,          /* Read the configuration file. */
				    int *c_ind,
				    whm_config_T **configs);
int            whm_write_config    (int c_ind,             /* Write the configuration file to disk. */
				    char *config_path,
				    whm_config_T **configs);
int            whm_modify_config   (char *company,         /* Update one field of the given whm_config_T struct array. */
				    char *position,
				    enum whm_config_field_type field,
				    char *value,
				    int max_config_ind,
				    whm_config_T **configs);
int            whm_list_config_names(int max_config_ind,   /* List names of active companies in the configuration file. */
				     whm_config_T **configs);
int            whm_list_config_fields(char *company,       /* List a given company's configuration file modifiable entries. */
				      int max_config_ind,
				      whm_config_T **configs);
char*          whm_get_company_name  (char *string,        /* Interactively get a company name to edit with whm_modify_config() */
				      size_t string_s,
				      int *max_config_ind,
				      whm_config_T **configs);
int            whm_get_field_name    (char *string,        /* Get the whm_config_T field to edit (enum whm_config_field_type). */
				      int max_config_ind,
				      whm_config_T **configs);

/* whm_mem_utils.c */
whm_time_T*    whm_init_time_type  (void);                 /* Allocate memory to a and return a whm_time_T object.         */
void           whm_free_time_type  (whm_time_T *time_o);   /* Free memory of a previously initialized whm_time_T object.   */
whm_queue_T*   whm_init_queue_type (int top_index,         /* Allocate memory to a whm_queue_T object.                     */
				    size_t elem_size);
void           whm_free_queue_type (whm_queue_T *queue);   /* Free memory of a previously initialized whm_queue_T object.  */ 
whm_config_T*  whm_init_config_type(void);                 /* Allocate memory for a whm_config_T object.                   */
void           whm_free_config_type(whm_config_T *config); /* Free memory of a previously initialized whm_config_T object. */
whm_day_T*     whm_init_day_type   (void);                 /* Allocate memory to a whm_day_T object.                       */
void           whm_free_day_type   (whm_day_T *day);       /* Free memory of a previously initialized whm_day_T object.    */
whm_week_T*    whm_init_week_type  (void);                 /* Allocate memory to a whm_week_T object.                      */
void           whm_free_week_type  (whm_week_T *week);     /* Free memory of a previously initialized whm_week_T object.   */
whm_sheet_T*   whm_init_sheet_type (void);                 /* Allocate memory to a whm_sheet_T object.                     */
void           whm_free_sheet_type (whm_sheet_T *sheet);   /* Free memory of a previously initialized whm_sheet_T object.  */
whm_option_T*  whm_init_option_type(void);                 /* Allocate memory to a whm_option_T object.                    */
void           whm_free_option_type(whm_option_T *option); /* Free memory allocated to a whm_option_T object.              */

void whm_PRINT_config(whm_config_T *config);               /* GDB debugging hook. DO NOT CALL WITHIN A PROGRAM !!          */
/*** MACROS ***/

/* Remove a trailing newline. */
# define WHM_TRIM_NEWLINE(string) do{			\
    size_t len = strlen(string);			\
    if (string[len-1] == NEWLINE) string[len-1] = '\0';	\
  } while (0);

/* Replace a space by an underscore. */
# define WHM_REPLACE_SPACE(string) do{			\
    size_t i = 0;					\
    while (string[i] != '\0'){				\
      if (string[i] == SPACE) string[i] = U_SCORE;	\
      ++i;						\
    }							\
  } while (0);




#endif /* WHM_MAIN_HEADER_FILE */
